name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze --fatal-infos

    - name: Run unit tests
      run: flutter test --coverage --reporter=json > test-results.json

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results.json

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Android APK
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate build number
      id: build_number
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
        else
          VERSION="dev-${GITHUB_SHA:0:8}"
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

    - name: Build APK
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        # Create temporary .env file for build
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" > .env
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env
        echo "APP_ENV=production" >> .env
        echo "DEBUG_MODE=false" >> .env

        # Build APK
        flutter build apk --release \
          --dart-define-from-file=.env \
          --build-name=${{ steps.build_number.outputs.version }} \
          --build-number=${{ steps.build_number.outputs.build_number }}

        # Clean up .env
        rm .env

    - name: Sign APK
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Decode keystore
        echo "$KEYSTORE_BASE64" | base64 -d > android/app/release.keystore

        # Sign APK
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks android/app/release.keystore \
          --ks-pass pass:$KEYSTORE_PASSWORD \
          --key-alias $KEY_ALIAS \
          --ks-key-alias $KEY_ALIAS \
          --key-pass pass:$KEY_PASSWORD \
          build/app/outputs/flutter-apk/app-release.apk

        # Verify signature
        $ANDROID_HOME/build-tools/34.0.0/apksigner verify \
          build/app/outputs/flutter-apk/app-release.apk

        # Clean up keystore
        rm android/app/release.keystore

    - name: Generate APK checksum
      run: |
        cd build/app/outputs/flutter-apk
        sha256sum app-release.apk > app-release.apk.sha256

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk-${{ steps.build_number.outputs.version }}
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/app/outputs/flutter-apk/app-release.apk.sha256
        retention-days: 30

  # Build iOS IPA (macOS runner required)
  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate build number
      id: build_number
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        BUILD_NUMBER=$GITHUB_RUN_NUMBER
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

    - name: Build iOS (no signing)
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        # Create temporary .env file for build
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" > .env
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env
        echo "APP_ENV=production" >> .env
        echo "DEBUG_MODE=false" >> .env

        # Build iOS
        flutter build ios --release --no-codesign \
          --dart-define-from-file=.env \
          --build-name=${{ steps.build_number.outputs.version }} \
          --build-number=${{ steps.build_number.outputs.build_number }}

        # Clean up .env
        rm .env

    - name: Upload iOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-build-${{ steps.build_number.outputs.version }}
        path: build/ios/Release-iphoneos/Runner.app
        retention-days: 30

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-android]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}

        # Generate changelog from commits
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)

        # Create release notes
        cat > release_notes.md << EOF
        # OIKAD v$VERSION

        ## Changes
        $CHANGELOG

        ## Download
        - **Android APK**: Download the APK file below and enable "Install from unknown sources"
        - **Checksum**: Verify integrity using the SHA-256 file

        ## Auto-Update
        Existing users will be notified automatically if auto-updates are enabled.

        ## Installation
        1. Download the APK file
        2. Enable "Install from unknown sources" in Android settings
        3. Install the APK
        4. Enjoy the new features!

        ## Support
        - Report issues: [GitHub Issues](https://github.com/paterkleomenis/oikad/issues)
        - Documentation: [Wiki](https://github.com/paterkleomenis/oikad/wiki)
        EOF

        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download APK artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-apk-${{ steps.changelog.outputs.version }}
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: OIKAD v${{ steps.changelog.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        files: |
          ./artifacts/app-release.apk
          ./artifacts/app-release.apk.sha256
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Build Web
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        # Create temporary .env file for build
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" > .env
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env
        echo "APP_ENV=production" >> .env
        echo "DEBUG_MODE=false" >> .env

        # Build web
        flutter build web --release --dart-define-from-file=.env

        # Clean up .env
        rm .env

    - name: Deploy to GitHub Pages
      if: startsWith(github.ref, 'refs/tags/v')
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/web
        cname: oikad.app

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build-android, release]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "✅ Release ${{ github.ref_name }} completed successfully!"
        echo "📱 APK available in GitHub Releases"
        echo "🔄 Auto-update will notify existing users"

    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        echo "🔍 Check the logs for details"
